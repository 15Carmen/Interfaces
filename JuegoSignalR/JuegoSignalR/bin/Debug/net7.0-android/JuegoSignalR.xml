<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JuegoSignalR</name>
    </assembly>
    <members>
        <member name="M:JuegoSignalR.ViewModels.GamePageVM.ButtonResetCommand_Execute">
            <summary>
            Método que reiniciará el juego, es decir, limpiará los botones para que tengan
            el texto en blanco y reactivará los botones que se hayan desactivado.
            </summary>
        </member>
        <member name="M:JuegoSignalR.ViewModels.GamePageVM.ButtonNewGameCommand_Execute">
            <summary>
            Método que empezará un juego completamente nuevo, por lo que reiniciará las 
            puntuaciones de los jugadores, limpiará los botones para que tengan el texto en
            blanco y reactivará los botones que se hayan desactivado
            </summary>
        </member>
        <member name="M:JuegoSignalR.ViewModels.GamePageVM.ButtonExitCommand_Execute">
            <summary>
            Método que saldrá de la aplicación. Se le mostrará al usuario un mensaje de 
            confirmación preguntando si está seguro de salir. La aplicación se cerrará si el 
            usuario lo confirma.
            </summary>
        </member>
        <member name="M:JuegoSignalR.ViewModels.GamePageVM.CheckForWin">
            <summary>
            Método que comprueba si hay un ganador después de cada movimiento.
            Actualizará las puntuaciones de los jugadores si es necesario.
            Mostrará un mensahe de ganador, de perdedor o de empate según corresponda.
            </summary>
        </member>
        <member name="M:JuegoSignalR.ViewModels.Utils.DelegateCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the RelayCommand class that 
            can always execute.
            </summary>
            <param name="execute">The execution logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="M:JuegoSignalR.ViewModels.Utils.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="E:JuegoSignalR.ViewModels.Utils.DelegateCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="M:JuegoSignalR.ViewModels.Utils.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:JuegoSignalR.ViewModels.Utils.DelegateCommand.CanExecuteChanged" /> event.
            </summary>
        </member>
        <member name="M:JuegoSignalR.ViewModels.Utils.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">This parameter will always be ignored.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:JuegoSignalR.ViewModels.Utils.DelegateCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked. 
            </summary>
            <param name="parameter">This parameter will always be ignored.</param>
        </member>
    </members>
</doc>
